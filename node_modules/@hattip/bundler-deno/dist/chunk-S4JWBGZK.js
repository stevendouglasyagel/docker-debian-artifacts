// src/index.ts
import { build } from "esbuild";
import { builtinModules } from "node:module";
import path from "node:path";
import cpr from "cpr";
import { promisify } from "node:util";
import { fileURLToPath } from "node:url";
var shimsDir = fileURLToPath(new URL("../shims", import.meta.url));
async function bundle(options, manipulateEsbuildOptions) {
  const { input, output, staticDir, nodeCompat = false } = options;
  const filter = new RegExp(`^(node:)?(${builtinModules.join("|")})$`);
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    // minify: true,
    entryPoints: [input],
    outfile: output,
    inject: nodeCompat ? [
      "global.js",
      "buffer.js",
      "console.js",
      "filename.js",
      "performance.js",
      "process.js",
      "timers.js"
    ].map((file) => path.join(shimsDir, file)) : [],
    platform: "node",
    target: "chrome96",
    format: "esm",
    conditions: ["deno", "import", "module", "require", "default"],
    external: ["https:*", "http:*", "node:*"],
    plugins: nodeCompat ? [
      {
        name: "node-builtins",
        setup(build2) {
          build2.onResolve({ filter }, async ({ path: path2, kind }) => {
            const [, , moduleName] = path2.match(filter);
            return kind === "require-call" ? {
              path: `${moduleName}`,
              namespace: "node:require",
              sideEffects: false
            } : {
              path: `node:${moduleName}`,
              external: true,
              sideEffects: false
            };
          });
          build2.onLoad(
            {
              namespace: "node:require",
              filter: /.*/
            },
            async ({ path: path2 }) => {
              return {
                contents: `import all from "${path2}"; module.exports = all;`
              };
            }
          );
        }
      }
    ] : void 0
  };
  await manipulateEsbuildOptions?.(esbuildOptions);
  await build(esbuildOptions);
  if (staticDir) {
    await promisify(cpr)(staticDir, path.dirname(output) + "/public", {
      deleteFirst: true
    });
  }
}

export {
  bundle
};
